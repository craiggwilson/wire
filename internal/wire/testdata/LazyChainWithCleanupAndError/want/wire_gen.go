// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/craiggwilson/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

// Injectors from wire.go:

func injectFooBar() (FooBar, func(), error) {
	fooFunc, cleanup := func() (func() (Foo, error), func()) {
		var instance Foo
		var wasSet bool
		var cleanup func()
		var err error
		return func() (Foo, error) {
				if !wasSet {
					wasSet = true
					instance, cleanup, err = provideFoo()
				}
				return instance, err
			}, func() {
				if wasSet {
					cleanup()
				}
			}
	}()
	barFunc, cleanup2 := func() (func() (Bar, error), func()) {
		var instance Bar
		var wasSet bool
		var cleanup func()
		var err error
		return func() (Bar, error) {
				if !wasSet {
					wasSet = true
					instance, cleanup, err = provideBar(fooFunc)
				}
				return instance, err
			}, func() {
				if wasSet {
					cleanup()
				}
			}
	}()
	fooBar, err := provideFooBar(barFunc)
	if err != nil {
		cleanup2()
		cleanup()
		return 0, nil, err
	}
	return fooBar, func() {
		cleanup2()
		cleanup()
	}, nil
}
